type Pet {
  id: ID!
  name: String!
  weight: Float
  category: PetCategory!
  checkedOut: Boolean
  photo: Photo
  dueBack: String
  inCareOf: Customer
}

type Customer {
  username: ID!
  name: String!
  currentPets: [Pet!]!
}

type Photo {
  full: String
  thumb: String
}

enum PetCategory {
  CAT
  DOG
  RABBIT
  STINGRAY
}

enum PetStatus {
  AVAILABLE
  CHECKEDOUT
}

input CreateAccountInput {
  name: String!
  username: ID!
  password: String!
}

type LogInPayload {
  customer: Customer
  token: String!
}

type CheckOutPayload {
  customer: Customer
  pet: Pet
  dueDate: String!
}

type Query {
  totalPets(status: PetStatus): Int!
  allPets(category: PetCategory, status: PetStatus): [Pet!]!
  petById(id: ID!): Pet!
  allCustomers: [Customer!]!
  me: Customer
}

type Mutation {
  createAccount(input: CreateAccountInput!): Customer!
  logIn(username: ID!, password: String!): LogInPayload!
  checkOut(id: ID!): CheckOutPayload!
}
